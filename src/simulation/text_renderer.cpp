// Production-ready text rendering implementation
#include "simulation/text_renderer.h"
#include <cstring>
#include <algorithm>

namespace tacs {

// 8x16 bitmap font data for ASCII characters 32-127
// Each character is 16 bytes (8 pixels wide, 16 pixels tall)
const uint8_t TextRenderer::FONT_DATA[] = {
    // Space (32)
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    // ! (33)
    0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x10,0x10,0x00,0x00,
    // " (34)
    0x00,0x24,0x24,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    // # (35)
    0x00,0x24,0x24,0x7E,0x24,0x24,0x24,0x7E,0x24,0x24,0x00,0x00,0x00,0x00,0x00,0x00,
    // $ (36)
    0x00,0x10,0x3C,0x52,0x50,0x30,0x1C,0x12,0x52,0x3C,0x10,0x10,0x00,0x00,0x00,0x00,
    // % (37)
    0x00,0x62,0x94,0x94,0x68,0x08,0x10,0x16,0x29,0x29,0x46,0x00,0x00,0x00,0x00,0x00,
    // & (38)
    0x00,0x30,0x48,0x48,0x30,0x30,0x4A,0x84,0x84,0x8A,0x71,0x00,0x00,0x00,0x00,0x00,
    // ' (39)
    0x00,0x10,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    // ( (40)
    0x00,0x08,0x10,0x20,0x20,0x40,0x40,0x40,0x40,0x20,0x20,0x10,0x08,0x00,0x00,0x00,
    // ) (41)
    0x00,0x20,0x10,0x08,0x08,0x04,0x04,0x04,0x04,0x08,0x08,0x10,0x20,0x00,0x00,0x00,
    // * (42)
    0x00,0x00,0x00,0x10,0x54,0x38,0x7C,0x38,0x54,0x10,0x00,0x00,0x00,0x00,0x00,0x00,
    // + (43)
    0x00,0x00,0x00,0x10,0x10,0x10,0x7C,0x10,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x00,
    // , (44)
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x20,0x00,0x00,0x00,
    // - (45)
    0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    // . (46)
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x00,0x00,0x00,0x00,
    // / (47)
    0x00,0x02,0x04,0x04,0x08,0x08,0x10,0x10,0x20,0x20,0x40,0x40,0x00,0x00,0x00,0x00,
    // 0 (48)
    0x00,0x3C,0x42,0x42,0x46,0x4A,0x52,0x62,0x42,0x42,0x3C,0x00,0x00,0x00,0x00,0x00,
    // 1 (49)
    0x00,0x10,0x30,0x50,0x10,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00,0x00,0x00,0x00,
    // 2 (50)
    0x00,0x3C,0x42,0x42,0x02,0x04,0x08,0x10,0x20,0x40,0x7E,0x00,0x00,0x00,0x00,0x00,
    // 3 (51)
    0x00,0x3C,0x42,0x02,0x02,0x1C,0x02,0x02,0x02,0x42,0x3C,0x00,0x00,0x00,0x00,0x00,
    // 4 (52)
    0x00,0x04,0x0C,0x14,0x24,0x44,0x84,0xFE,0x04,0x04,0x04,0x00,0x00,0x00,0x00,0x00,
    // 5 (53)
    0x00,0x7E,0x40,0x40,0x40,0x7C,0x02,0x02,0x02,0x42,0x3C,0x00,0x00,0x00,0x00,0x00,
    // 6 (54)
    0x00,0x1C,0x20,0x40,0x40,0x7C,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,0x00,0x00,0x00,
    // 7 (55)
    0x00,0x7E,0x02,0x02,0x04,0x04,0x08,0x08,0x10,0x10,0x20,0x00,0x00,0x00,0x00,0x00,
    // 8 (56)
    0x00,0x3C,0x42,0x42,0x42,0x3C,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,0x00,0x00,0x00,
    // 9 (57)
    0x00,0x3C,0x42,0x42,0x42,0x3E,0x02,0x02,0x02,0x04,0x38,0x00,0x00,0x00,0x00,0x00,
    // : (58)
    0x00,0x00,0x00,0x10,0x10,0x00,0x00,0x00,0x00,0x10,0x10,0x00,0x00,0x00,0x00,0x00,
    // ; (59)
    0x00,0x00,0x00,0x10,0x10,0x00,0x00,0x00,0x00,0x10,0x10,0x20,0x00,0x00,0x00,0x00,
    // < (60)
    0x00,0x00,0x04,0x08,0x10,0x20,0x40,0x20,0x10,0x08,0x04,0x00,0x00,0x00,0x00,0x00,
    // = (61)
    0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    // > (62)
    0x00,0x00,0x40,0x20,0x10,0x08,0x04,0x08,0x10,0x20,0x40,0x00,0x00,0x00,0x00,0x00,
    // ? (63)
    0x00,0x3C,0x42,0x42,0x02,0x04,0x08,0x10,0x10,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    // @ (64)
    0x00,0x3C,0x42,0x42,0x4E,0x52,0x52,0x52,0x4E,0x40,0x3E,0x00,0x00,0x00,0x00,0x00,
    // A (65)
    0x00,0x18,0x24,0x42,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0x00,0x00,0x00,0x00,0x00,
    // B (66)
    0x00,0x7C,0x42,0x42,0x42,0x7C,0x42,0x42,0x42,0x42,0x7C,0x00,0x00,0x00,0x00,0x00,
    // C (67)
    0x00,0x3C,0x42,0x40,0x40,0x40,0x40,0x40,0x40,0x42,0x3C,0x00,0x00,0x00,0x00,0x00,
    // D (68)
    0x00,0x78,0x44,0x42,0x42,0x42,0x42,0x42,0x42,0x44,0x78,0x00,0x00,0x00,0x00,0x00,
    // E (69)
    0x00,0x7E,0x40,0x40,0x40,0x7C,0x40,0x40,0x40,0x40,0x7E,0x00,0x00,0x00,0x00,0x00,
    // F (70)
    0x00,0x7E,0x40,0x40,0x40,0x7C,0x40,0x40,0x40,0x40,0x40,0x00,0x00,0x00,0x00,0x00,
    // G (71)
    0x00,0x3C,0x42,0x40,0x40,0x40,0x4E,0x42,0x42,0x46,0x3A,0x00,0x00,0x00,0x00,0x00,
    // H (72)
    0x00,0x42,0x42,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0x42,0x00,0x00,0x00,0x00,0x00,
    // I (73)
    0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00,0x00,0x00,0x00,
    // J (74)
    0x00,0x1E,0x04,0x04,0x04,0x04,0x04,0x04,0x44,0x44,0x38,0x00,0x00,0x00,0x00,0x00,
    // K (75)
    0x00,0x42,0x44,0x48,0x50,0x60,0x50,0x48,0x44,0x42,0x42,0x00,0x00,0x00,0x00,0x00,
    // L (76)
    0x00,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7E,0x00,0x00,0x00,0x00,0x00,
    // M (77)
    0x00,0x42,0x66,0x5A,0x5A,0x42,0x42,0x42,0x42,0x42,0x42,0x00,0x00,0x00,0x00,0x00,
    // N (78)
    0x00,0x42,0x62,0x52,0x52,0x4A,0x4A,0x46,0x46,0x42,0x42,0x00,0x00,0x00,0x00,0x00,
    // O (79)
    0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,0x00,0x00,0x00,
    // P (80)
    0x00,0x7C,0x42,0x42,0x42,0x7C,0x40,0x40,0x40,0x40,0x40,0x00,0x00,0x00,0x00,0x00,
    // Q (81)
    0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x4A,0x44,0x3A,0x00,0x00,0x00,0x00,0x00,
    // R (82)
    0x00,0x7C,0x42,0x42,0x42,0x7C,0x48,0x44,0x42,0x42,0x42,0x00,0x00,0x00,0x00,0x00,
    // S (83)
    0x00,0x3C,0x42,0x40,0x40,0x3C,0x02,0x02,0x02,0x42,0x3C,0x00,0x00,0x00,0x00,0x00,
    // T (84)
    0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x00,0x00,0x00,
    // U (85)
    0x00,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,0x00,0x00,0x00,
    // V (86)
    0x00,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x24,0x18,0x18,0x00,0x00,0x00,0x00,0x00,
    // W (87)
    0x00,0x42,0x42,0x42,0x42,0x42,0x5A,0x5A,0x66,0x42,0x42,0x00,0x00,0x00,0x00,0x00,
    // X (88)
    0x00,0x42,0x42,0x24,0x18,0x18,0x18,0x24,0x42,0x42,0x42,0x00,0x00,0x00,0x00,0x00,
    // Y (89)
    0x00,0x82,0x82,0x44,0x28,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x00,0x00,0x00,
    // Z (90)
    0x00,0x7E,0x02,0x04,0x08,0x10,0x10,0x20,0x40,0x40,0x7E,0x00,0x00,0x00,0x00,0x00,
    // [ (91)
    0x00,0x3C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x3C,0x00,0x00,0x00,0x00,0x00,
    // \ (92)
    0x00,0x40,0x40,0x20,0x20,0x10,0x10,0x08,0x08,0x04,0x04,0x02,0x00,0x00,0x00,0x00,
    // ] (93)
    0x00,0x3C,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x3C,0x00,0x00,0x00,0x00,0x00,
    // ^ (94)
    0x00,0x10,0x28,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    // _ (95)
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,
    // ` (96)
    0x20,0x10,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    // a (97)
    0x00,0x00,0x00,0x00,0x3C,0x02,0x02,0x3E,0x42,0x42,0x3E,0x00,0x00,0x00,0x00,0x00,
    // b (98)
    0x00,0x40,0x40,0x40,0x5C,0x62,0x42,0x42,0x42,0x62,0x5C,0x00,0x00,0x00,0x00,0x00,
    // c (99)
    0x00,0x00,0x00,0x00,0x3C,0x42,0x40,0x40,0x40,0x42,0x3C,0x00,0x00,0x00,0x00,0x00,
    // d (100)
    0x00,0x02,0x02,0x02,0x3A,0x46,0x42,0x42,0x42,0x46,0x3A,0x00,0x00,0x00,0x00,0x00,
    // e (101)
    0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x7E,0x40,0x40,0x3E,0x00,0x00,0x00,0x00,0x00,
    // f (102)
    0x00,0x1C,0x22,0x20,0x20,0x7C,0x20,0x20,0x20,0x20,0x20,0x00,0x00,0x00,0x00,0x00,
    // g (103)
    0x00,0x00,0x00,0x00,0x3A,0x44,0x44,0x38,0x40,0x3C,0x42,0x42,0x3C,0x00,0x00,0x00,
    // h (104)
    0x00,0x40,0x40,0x40,0x5C,0x62,0x42,0x42,0x42,0x42,0x42,0x00,0x00,0x00,0x00,0x00,
    // i (105)
    0x00,0x10,0x00,0x00,0x30,0x10,0x10,0x10,0x10,0x10,0x38,0x00,0x00,0x00,0x00,0x00,
    // j (106)
    0x00,0x04,0x00,0x00,0x0C,0x04,0x04,0x04,0x04,0x04,0x44,0x44,0x38,0x00,0x00,0x00,
    // k (107)
    0x00,0x40,0x40,0x40,0x44,0x48,0x50,0x60,0x50,0x48,0x44,0x00,0x00,0x00,0x00,0x00,
    // l (108)
    0x00,0x30,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x38,0x00,0x00,0x00,0x00,0x00,
    // m (109)
    0x00,0x00,0x00,0x00,0x76,0x49,0x49,0x49,0x49,0x49,0x49,0x00,0x00,0x00,0x00,0x00,
    // n (110)
    0x00,0x00,0x00,0x00,0x5C,0x62,0x42,0x42,0x42,0x42,0x42,0x00,0x00,0x00,0x00,0x00,
    // o (111)
    0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,0x00,0x00,0x00,
    // p (112)
    0x00,0x00,0x00,0x00,0x5C,0x62,0x42,0x42,0x42,0x62,0x5C,0x40,0x40,0x00,0x00,0x00,
    // q (113)
    0x00,0x00,0x00,0x00,0x3A,0x46,0x42,0x42,0x42,0x46,0x3A,0x02,0x02,0x00,0x00,0x00,
    // r (114)
    0x00,0x00,0x00,0x00,0x5C,0x62,0x40,0x40,0x40,0x40,0x40,0x00,0x00,0x00,0x00,0x00,
    // s (115)
    0x00,0x00,0x00,0x00,0x3C,0x40,0x40,0x3C,0x02,0x02,0x7C,0x00,0x00,0x00,0x00,0x00,
    // t (116)
    0x00,0x00,0x20,0x20,0x7C,0x20,0x20,0x20,0x20,0x22,0x1C,0x00,0x00,0x00,0x00,0x00,
    // u (117)
    0x00,0x00,0x00,0x00,0x42,0x42,0x42,0x42,0x42,0x46,0x3A,0x00,0x00,0x00,0x00,0x00,
    // v (118)
    0x00,0x00,0x00,0x00,0x42,0x42,0x42,0x42,0x24,0x24,0x18,0x00,0x00,0x00,0x00,0x00,
    // w (119)
    0x00,0x00,0x00,0x00,0x41,0x49,0x49,0x49,0x49,0x49,0x36,0x00,0x00,0x00,0x00,0x00,
    // x (120)
    0x00,0x00,0x00,0x00,0x42,0x24,0x18,0x18,0x18,0x24,0x42,0x00,0x00,0x00,0x00,0x00,
    // y (121)
    0x00,0x00,0x00,0x00,0x42,0x42,0x42,0x42,0x46,0x3A,0x02,0x42,0x3C,0x00,0x00,0x00,
    // z (122)
    0x00,0x00,0x00,0x00,0x7E,0x04,0x08,0x10,0x20,0x40,0x7E,0x00,0x00,0x00,0x00,0x00,
    // { (123)
    0x00,0x0C,0x10,0x10,0x10,0x10,0x20,0x10,0x10,0x10,0x10,0x0C,0x00,0x00,0x00,0x00,
    // | (124)
    0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x00,0x00,
    // } (125)
    0x00,0x30,0x08,0x08,0x08,0x08,0x04,0x08,0x08,0x08,0x08,0x30,0x00,0x00,0x00,0x00,
    // ~ (126)
    0x00,0x00,0x00,0x00,0x00,0x31,0x49,0x46,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    // DEL (127)
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

TextRenderer::TextRenderer(SDL_Renderer* renderer) 
    : renderer_(renderer), font_texture_(nullptr) {
}

TextRenderer::~TextRenderer() {
    if (font_texture_) {
        SDL_DestroyTexture(font_texture_);
    }
}

bool TextRenderer::initialize() {
    generateFontBitmap();
    return font_texture_ != nullptr;
}

void TextRenderer::generateFontBitmap() {
    // Create surface for font bitmap
    SDL_Surface* surface = SDL_CreateRGBSurface(0, 
        CHARS_PER_ROW * CHAR_WIDTH, 
        6 * CHAR_HEIGHT,  // 96 characters / 16 per row = 6 rows
        32, 0xFF000000, 0x00FF0000, 0x0000FF00, 0x000000FF);
    
    if (!surface) {
        return;
    }
    
    // Clear to transparent
    SDL_FillRect(surface, nullptr, SDL_MapRGBA(surface->format, 0, 0, 0, 0));
    
    // Lock surface for pixel access
    SDL_LockSurface(surface);
    
    uint32_t* pixels = (uint32_t*)surface->pixels;
    int pitch = surface->pitch / sizeof(uint32_t);
    
    // Render each character
    for (int c = 32; c <= 127; c++) {
        int char_index = c - 32;
        int row = char_index / CHARS_PER_ROW;
        int col = char_index % CHARS_PER_ROW;
        
        // Starting position in bitmap
        int start_x = col * CHAR_WIDTH;
        int start_y = row * CHAR_HEIGHT;
        
        // Copy character bitmap data
        for (int y = 0; y < CHAR_HEIGHT; y++) {
            uint8_t row_data = FONT_DATA[char_index * 16 + y];
            for (int x = 0; x < CHAR_WIDTH; x++) {
                if (row_data & (0x80 >> x)) {
                    int px = start_x + x;
                    int py = start_y + y;
                    pixels[py * pitch + px] = SDL_MapRGBA(surface->format, 255, 255, 255, 255);
                }
            }
        }
    }
    
    SDL_UnlockSurface(surface);
    
    // Create texture from surface
    font_texture_ = SDL_CreateTextureFromSurface(renderer_, surface);
    SDL_SetTextureBlendMode(font_texture_, SDL_BLENDMODE_BLEND);
    
    SDL_FreeSurface(surface);
}

void TextRenderer::renderText(const std::string& text, int x, int y,
                             uint8_t r, uint8_t g, uint8_t b, uint8_t a) {
    if (!font_texture_) return;
    
    SDL_SetTextureColorMod(font_texture_, r, g, b);
    SDL_SetTextureAlphaMod(font_texture_, a);
    
    int cur_x = x;
    for (char c : text) {
        if (c == '\n') {
            cur_x = x;
            y += CHAR_HEIGHT;
            continue;
        }
        
        renderChar(c, cur_x, y, r, g, b, a);
        cur_x += CHAR_WIDTH;
    }
}

void TextRenderer::renderChar(char c, int x, int y, 
                             uint8_t r, uint8_t g, uint8_t b, uint8_t a) {
    if (c < 32 || c > 127) return;
    
    int char_index = c - 32;
    int row = char_index / CHARS_PER_ROW;
    int col = char_index % CHARS_PER_ROW;
    
    SDL_Rect src = {
        col * CHAR_WIDTH,
        row * CHAR_HEIGHT,
        CHAR_WIDTH,
        CHAR_HEIGHT
    };
    
    SDL_Rect dst = {x, y, CHAR_WIDTH, CHAR_HEIGHT};
    
    SDL_RenderCopy(renderer_, font_texture_, &src, &dst);
}

void TextRenderer::getTextSize(const std::string& text, int& width, int& height) const {
    width = 0;
    height = CHAR_HEIGHT;
    
    int line_width = 0;
    for (char c : text) {
        if (c == '\n') {
            width = std::max(width, line_width);
            line_width = 0;
            height += CHAR_HEIGHT;
        } else {
            line_width += CHAR_WIDTH;
        }
    }
    width = std::max(width, line_width);
}

// DrawUtils implementation

void DrawUtils::drawFilledCircle(SDL_Renderer* renderer, int cx, int cy, int radius) {
    int x = 0;
    int y = radius;
    int d = 3 - 2 * radius;
    
    fillCircleLines(renderer, cx, cy, x, y);
    
    while (y >= x) {
        x++;
        
        if (d > 0) {
            y--;
            d = d + 4 * (x - y) + 10;
        } else {
            d = d + 4 * x + 6;
        }
        
        fillCircleLines(renderer, cx, cy, x, y);
    }
}

void DrawUtils::drawCircle(SDL_Renderer* renderer, int cx, int cy, int radius) {
    int x = 0;
    int y = radius;
    int d = 3 - 2 * radius;
    
    drawCirclePoints(renderer, cx, cy, x, y);
    
    while (y >= x) {
        x++;
        
        if (d > 0) {
            y--;
            d = d + 4 * (x - y) + 10;
        } else {
            d = d + 4 * x + 6;
        }
        
        drawCirclePoints(renderer, cx, cy, x, y);
    }
}

void DrawUtils::drawCirclePoints(SDL_Renderer* renderer, int cx, int cy, int x, int y) {
    SDL_RenderDrawPoint(renderer, cx + x, cy + y);
    SDL_RenderDrawPoint(renderer, cx - x, cy + y);
    SDL_RenderDrawPoint(renderer, cx + x, cy - y);
    SDL_RenderDrawPoint(renderer, cx - x, cy - y);
    SDL_RenderDrawPoint(renderer, cx + y, cy + x);
    SDL_RenderDrawPoint(renderer, cx - y, cy + x);
    SDL_RenderDrawPoint(renderer, cx + y, cy - x);
    SDL_RenderDrawPoint(renderer, cx - y, cy - x);
}

void DrawUtils::fillCircleLines(SDL_Renderer* renderer, int cx, int cy, int x, int y) {
    SDL_RenderDrawLine(renderer, cx - x, cy + y, cx + x, cy + y);
    SDL_RenderDrawLine(renderer, cx - x, cy - y, cx + x, cy - y);
    SDL_RenderDrawLine(renderer, cx - y, cy + x, cx + y, cy + x);
    SDL_RenderDrawLine(renderer, cx - y, cy - x, cx + y, cy - x);
}

void DrawUtils::drawThickLine(SDL_Renderer* renderer, int x1, int y1, int x2, int y2, int thickness) {
    // Calculate perpendicular offset
    float dx = x2 - x1;
    float dy = y2 - y1;
    float len = std::sqrt(dx * dx + dy * dy);
    if (len == 0) return;
    
    dx /= len;
    dy /= len;
    
    // Perpendicular vector
    float px = -dy;
    float py = dx;
    
    // Draw multiple lines to create thickness
    for (int i = -thickness/2; i <= thickness/2; i++) {
        SDL_RenderDrawLine(renderer, 
            x1 + i * px, y1 + i * py,
            x2 + i * px, y2 + i * py);
    }
}

} // namespace tacs