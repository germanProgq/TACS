How to Run Tests for Traffic AI Project
========================================

This project includes comprehensive unit tests, performance tests, and validation tests.

Prerequisites
-------------
- GoogleTest (gtest) must be installed on your system
  - On macOS: brew install googletest
  - On Linux: sudo apt-get install libgtest-dev
- CMake 3.15 or higher
- C++17 compatible compiler

Building the Tests
------------------
1. Navigate to the project root directory:
   cd /path/to/traffic_ai

2. Create and enter the build directory:
   mkdir -p build
   cd build

3. Configure the project with CMake:
   cmake ..

4. Build all targets including tests:
   make

Running the Tests
-----------------
There are several ways to run the tests:

1. Run all unit tests at once:
   ./tests/run_tests

2. Run tests using CTest (recommended):
   ctest
   
   For verbose output:
   ctest -V

3. Run specific test executables:
   - Performance tests: ./performance_test
   - Phase 1 validation: ./phase1_validation

Test Suite Contents
-------------------
The test suite includes:

- test_tensor.cpp: Tests for the Tensor class implementation
- test_layers.cpp: Tests for neural network layers (Conv2D, BatchNorm, LeakyReLU)
- test_tacsnet.cpp: Tests for the TACSNet model
- test_serialization.cpp: Tests for model serialization/deserialization
- performance_test.cpp: Performance benchmarks and stress tests
- phase1_validation.cpp: Validation tests for Phase 1 implementation

Advanced Options
----------------
- Run specific test cases:
  ./tests/run_tests --gtest_filter=TestSuiteName.TestCaseName

- List all available tests:
  ./tests/run_tests --gtest_list_tests

- Run tests with colored output:
  ./tests/run_tests --gtest_color=yes

- Generate XML test report:
  ./tests/run_tests --gtest_output=xml:test_results.xml

Troubleshooting
---------------
- If tests fail to build, ensure GoogleTest is properly installed
- On macOS, GoogleTest should be installed via Homebrew at /opt/homebrew
- Check that your compiler supports C++17 features
- Ensure all project dependencies are properly built before running tests

Notes
-----
- The test suite uses "NASA-level" testing constants for rigorous validation
- Performance tests include multi-threaded stress testing
- All tests should pass before committing changes to the repository